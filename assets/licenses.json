{
    "@expo/vector-icons@14.1.0": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/vector-icons",
        "publisher": "Brent Vatne",
        "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Joel Arvidsson\nCopyright (c) 2020 650 Industries\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2015 Joel Arvidsson. Copyright (c) 2020 650 Industries"
    },
    "@react-native-async-storage/async-storage@2.1.2": {
        "licenses": "MIT",
        "repository": "https://github.com/react-native-async-storage/async-storage",
        "publisher": "Krzysztof Borowy",
        "email": "contact@kborowy.com",
        "licenseText": "MIT License\n\nCopyright (c) 2015-present, Facebook, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2015-present, Facebook, Inc."
    },
    "@react-navigation/bottom-tabs@7.3.13": {
        "licenses": "MIT",
        "repository": "https://github.com/react-navigation/react-navigation",
        "licenseText": "MIT License\n\nCopyright (c) 2017 React Navigation Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2017 React Navigation Contributors"
    },
    "@react-navigation/elements@2.4.2": {
        "licenses": "MIT",
        "repository": "https://github.com/react-navigation/react-navigation",
        "licenseText": "MIT License\n\nCopyright (c) 2017 React Navigation Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2017 React Navigation Contributors"
    },
    "@react-navigation/native@7.1.9": {
        "licenses": "MIT",
        "repository": "https://github.com/react-navigation/react-navigation",
        "licenseText": "MIT License\n\nCopyright (c) 2017 React Navigation Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2017 React Navigation Contributors"
    },
    "expo-application@6.1.4": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "# expo-application\n\nGets native application information such as its ID, app name, and build version at runtime.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/application/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/application/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](#https://docs.expo.dev/versions/latest/sdk/application/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-application\n```\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-blur@14.1.4": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/blur-view/\">\n    <img\n      src=\"../../.github/resources/expo-blur.svg\"\n      alt=\"expo-blur\"\n      height=\"64\" />\n  </a>\n</p>\n\nA component that renders a native blur view on iOS and falls back to a semi-transparent view on Android. A common usage of this is for navigation bars, tab bars, and modals.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/blur-view/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/blur-view/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/blur-view/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-blur\n```\n\n### Configure for Android\n\n> [!note]\n> This package only supports iOS. On Android, a plain `View` with a translucent background will be rendered.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-constants@17.1.6": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "# expo-constants\n\nProvides system information that remains constant throughout the lifetime of your app.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/constants/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/constants/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/constants/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-constants\n```\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-font@13.3.1": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/font/\">\n    <img\n      src=\"../../.github/resources/expo-font.svg\"\n      alt=\"expo-font\"\n      height=\"64\" />\n  </a>\n</p>\n\nLoad fonts at runtime and use them in React Native components.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/font/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/font/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/font/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-font\n```\n\n### Configure for Android\n\nNo additional set up necessary.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-haptics@14.1.4": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/haptics/\">\n    <img\n      src=\"../../.github/resources/expo-haptics.svg\"\n      alt=\"expo-haptics\"\n      height=\"64\" />\n  </a>\n</p>\n\nProvides access to the system's haptics engine on iOS, vibration effects on Android, and Web Vibration API on web.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/haptics/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/haptics/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/haptics/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-haptics\n```\n\n### Configure for Android\n\nNo additional set up necessary.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\nThis module requires permission to control vibration on the device, it's added automatically.\n\n```xml\n<!-- Added permissions -->\n<uses-permission android:name=\"android.permission.VIBRATE\" />\n```\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-image@2.1.7": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/unversioned/sdk/image/\">\n    <img\n      src=\"../../.github/resources/expo-image.svg\"\n      alt=\"expo-image\"\n      height=\"64\" />\n  </a>\n</p>\n\nA cross-platform, performant image component for React Native and Expo.\n\n## Main features\n\n- Designed for speed\n- Support for many image formats (including animated ones)\n- Disk and memory caching\n- Supports [BlurHash](https://blurha.sh) and [ThumbHash](https://evanw.github.io/thumbhash/) - compact representations of a placeholder for an image\n- Transitioning between images when the source changes (no more flickering!)\n- Implements the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) and [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) properties (see [`contentFit`](#contentfit) and [`contentPosition`](#contentposition) props)\n- Uses performant [`SDWebImage`](https://github.com/SDWebImage/SDWebImage) and [`Glide`](https://github.com/bumptech/glide) under the hood\n\n## Supported image formats\n\n|   Format   | Android | iOS |                      Web                       |\n| :--------: | :-----: | :-: | :--------------------------------------------: |\n|    WebP    |   ✅    | ✅  |                       ✅                       |\n| PNG / APNG |   ✅    | ✅  |                       ✅                       |\n|    AVIF    |   ✅    | ✅  |                       ✅                       |\n|    HEIC    |   ✅    | ✅  | ❌ [not adopted yet](https://caniuse.com/heif) |\n|    JPEG    |   ✅    | ✅  |                       ✅                       |\n|    GIF     |   ✅    | ✅  |                       ✅                       |\n|    SVG     |   ✅    | ✅  |                       ✅                       |\n|    ICO     |   ✅    | ✅  |                       ✅                       |\n|    ICNS    |   ❌    | ✅  |                       ❌                       |\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/image/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/image/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-image\n```\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n### Configure for Android\n\nNo additional setup necessary.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-linking@7.1.5": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "# expo-linking\n\nCreate and open deep links universally.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/linking/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/linking/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/linking/). If you follow the link and there is no documentation available then this library is not yet usable within managed projects &mdash; it is likely to be included in an upcoming Expo SDK release.\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-linking\n```\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-router@5.0.7": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "# expo-router\n\nCheck out the [Expo Router documentation](https://docs.expo.dev/routing/introduction/) for more information.",
        "copyright": null
    },
    "expo-secure-store@14.2.3": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/securestore/\">\n    <img\n      src=\"../../.github/resources/expo-secure-store.svg\"\n      alt=\"expo-secure-store\"\n      height=\"64\" />\n  </a>\n</p>\n\nProvides a way to encrypt and securely store key–value pairs locally on the device.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/securestore/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/securestore/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/securestore/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-secure-store\n```\n\n### Configure for Android\n\nNo additional set up necessary.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-splash-screen@0.30.8": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/splash-screen/\">\n    <img\n      src=\"../../.github/resources/expo-splash-screen.svg\"\n      alt=\"expo-splash-screen\"\n      height=\"64\" />\n  </a>\n</p>\n\n`expo-splash-screen` allows you to customize your app's splash screen, which is the initial screen users see when the app is launched, before it has loaded. Splash screens (sometimes called launch screens) provide a user's first experience with your application.\n\n- [📜 CHANGELOG](./CHANGELOG.md)\n- [🚀 Features](#-features)\n- [📚 API](#-api)\n- [🗒 Examples](#-examples)\n- [💻 Installation in managed Expo projects](#-installation-in-managed-expo-projects)\n- [🖥 Installation in bare React Native projects](#-installation-in-bare-react-native-projects)\n  - [📱 Configure iOS](#-configure-ios)\n  - [🤖 Configure Android](#-configure-android)\n- [👏 Contributing](#-contributing)\n- [❓ Known issues](#-known-issues)\n- [⬆️ Migrate from old versions](#%EF%B8%8F-migrate-from-old-versions)\n- [🏅 Hall of fame](#-hall-of-fame)\n\n## 🚀 Features\n\n### Built-in splash screen image resize modes\n\n`expo-splash-screen` contains a built-in feature for taking care of properly displaying your splash screen image. You can use the following resize modes to obtain behavior as if you were using the React Native `<Image>` component's `resizeMode` style.\n\n#### `CONTAIN` resize mode\n\nScale the image uniformly (maintaining the image's aspect ratio) so that both dimensions the width and height of the image will be equal to or less than the corresponding dimension of the device's screen.\n\n<table>\n  <thead><tr><td>Android</td><td>iOS</td></tr></thead>\n  <tbody><tr>\n<td>\n\nhttps://user-images.githubusercontent.com/379606/120575867-aeeb3580-c3d6-11eb-825d-19a847fe30f5.mp4\n\n</td>\n<td>\n\nhttps://user-images.githubusercontent.com/379606/120575885-b6124380-c3d6-11eb-8485-75a11832962c.mp4\n\n</td>\n    </tr>\n  </tbody>\n</table>\n\n#### `COVER` resize mode\n\nScale the image uniformly (maintaining the image's aspect ratio) so that both the width and height of the image will be equal to or larger than the corresponding dimension of the device's screen.\n\n<table>\n  <thead><tr><td>Android</td><td>iOS</td></tr></thead>\n  <tbody><tr>\n<td>\n\nhttps://user-images.githubusercontent.com/379606/120575871-b1e62600-c3d6-11eb-9435-5dee19791294.mp4\n\n</td>\n<td>\n\nhttps://user-images.githubusercontent.com/379606/120575890-b7437080-c3d6-11eb-9c0a-3c563d1ee02a.mp4\n\n</td>\n    </tr>\n  </tbody>\n</table>\n\n#### `NATIVE` resize mode\n\n> **Android only.**\n\nBy using this resize mode your app will will leverage Android's ability to present a static bitmap while the application is starting up.\nAndroid (unlike iOS) does not support stretching of the provided image during launch, so the application will present the given image centered on the screen at its original dimensions.\n\n<table>\n  <thead><tr><td>Android</td></tr></thead>\n  <tbody><tr>\n<td>\n\nhttps://user-images.githubusercontent.com/379606/120575878-b3afe980-c3d6-11eb-80c1-72441c22e8be.mp4\n\n</td>\n    </tr>\n  </tbody>\n</table>\n\n> Animation above presents one of our [known issues](#native-mode-pushes-splash-image-up-a-little-bit)\n\nSelecting this resize mode requires some more work to be done in native configuration.\nPlease take a look at the [`res/drawable/splashscreen.xml`](#resdrawablesplashscreenxml) and [`res/drawable/splashscreen_background.png`](#resdrawablesplashscreen_backgroundpng) sections.\n\n### Per-appearance (a.k.a. dark-mode) splash screen\n\n`expo-splash-screen` supports per-appearance splash screens that respond to system appearance changes on iOS 13+ and dark-mode changes on Android 10+.\n\n### StatusBar customization\n\n`expo-splash-screen` allows customization of the StatusBar according to the [ReactNative StatusBar API](https://reactnative.dev/docs/statusbar).\n\n## 📚 API\n\n```tsx\nimport * as SplashScreen from 'expo-splash-screen';\n```\n\nThe native splash screen that is controlled via this module autohides once the ReactNative-controlled view hierarchy is mounted. This means that when your app first `render`s view component, the native splash screen will hide. This default behavior can be prevented by calling [`SplashScreen.preventAutoHideAsync()`](#splashscreenpreventautohideasync) and later on [`SplashScreen.hideAsync()`](#splashscreenhideasync).\n\n### `SplashScreen.preventAutoHideAsync()`\n\nThis method makes the native splash screen stay visible until [`SplashScreen.hideAsync()`](#splashscreenhideasync) is called. This must be called before any ReactNative-controlled view hierarchy is rendered (either in the global scope of your main component, or when the component renders `null` at the beginning - see [Examples section](#-examples)).\n\nPreventing default autohiding might come in handy if your application needs to prepare/download some resources and/or make some API calls before first rendering some actual view hierarchy.\n\n#### Returns\n\nA `Promise` that resolves to `true` when preventing autohiding succeeded and to `false` if the native splash screen is already prevented from autohiding (for instance, if you've already called this method).\n`Promise` rejection most likely means that native splash screen cannot be prevented from autohiding (it's already hidden when this method was executed).\n\n### `SplashScreen.hideAsync()`\n\nHides the native splash screen. Only works if the native splash screen has been previously prevented from autohiding by calling [`SplashScreen.preventAutoHideAsync()`](#splashscreenpreventautohideasync) method.\n\n#### Returns\n\nA `Promise` that resolves to `true` once the splash screen becomes hidden and to `false` if the splash screen is already hidden.\n\n## 🗒 Examples\n\n### `SplashScreen.preventAutoHideAsync()` in global scope\n\n`App.tsx`\n\n```tsx\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\n// Prevent native splash screen from autohiding before App component declaration\nSplashScreen.preventAutoHideAsync()\n  .then((result) => console.log(`SplashScreen.preventAutoHideAsync() succeeded: ${result}`))\n  .catch(console.warn); // it's good to explicitly catch and inspect any error\n\nexport default class App extends React.Component {\n  componentDidMount() {\n    // Hides native splash screen after 2s\n    setTimeout(async () => {\n      await SplashScreen.hideAsync();\n    }, 2000);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n### `SplashScreen.preventAutoHideAsync()` in component that initially renders `null`\n\n`App.tsx`\n\n```tsx\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\n\nexport default class App extends React.Component {\n  state = {\n    appIsReady: false,\n  };\n\n  async componentDidMount() {\n    // Prevent native splash screen from autohiding\n    try {\n      await SplashScreen.preventAutoHideAsync();\n    } catch (e) {\n      console.warn(e);\n    }\n    this.prepareResources();\n  }\n\n  /**\n   * Method that serves to load resources and make API calls\n   */\n  prepareResources = async () => {\n    await performAPICalls(...);\n    await downloadAssets(...);\n\n    this.setState({ appIsReady: true }, async () => {\n      await SplashScreen.hideAsync();\n    });\n  }\n\n  render() {\n    if (!this.state.appIsReady) {\n      return null;\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text style={styles.text}>SplashScreen Demo! 👋</Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aabbcc',\n  },\n  text: {\n    color: 'white',\n    fontWeight: 'bold',\n  },\n});\n```\n\n## 💻 Installation in managed Expo projects\n\nRefer to [the SplashScreen section of the Expo documentation](https://docs.expo.dev/versions/latest/sdk/splash-screen/).\n\n## 🖥 Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n## Add the package to your dependencies\n\n```\nnpx expo install expo-splash-screen\n```\n\n## 📱 Configure iOS\n\nRun `npx pod-install` after installing the package.\n\n### Manual Configuration\n\nTo achieve native splash screen (in iOS ecosystem it's called `LaunchScreen`) behavior, you have to provide either a `SplashScreen.storyboard` file or a `SplashScreen.xib` file, and configure your Xcode project accordingly.\n\nThe guide below shows how to configure your Xcode project to use a single image file as a splash screen using a `.storyboard` file (configuration for `.xib` filetype is analogous).\n\n1. [Add an image to `Images.xcassets`](#-add-an-image-to-imagesxcassets)\n2. [Create `SplashScreen.storyboard`](#-create-splashscreenstoryboard)\n3. [Select `Content Mode` for the `ImageView` in `SplashScreen.storyboard`](#-select-content-mode-for-the-imageview-in-splashscreenstoryboard)\n4. [Mark `SplashScreen.storyboard` as the LaunchScreen](#-mark-splashscreenstoryboard-as-the-launchscreen)\n5. [(<em>optional</em>) Enable dark mode](#-optional-enable-dark-mode)\n6. [(<em>optional</em>) Customize StatusBar](#-customize-statusbar)\n\n#### 🛠 Add an image to `Images.xcassets`\n\nFirst you need to add the image file that would serve as a splash screen to your native project's resources.\n\n1. In your Xcode project open the `.xcassets` (often named `Images.xcassets` or `Assets.xcassets`) file.\n2. In the content panel add `New image set` and name it `SplashScreen`.\n3. Provide the splash screen image you've prepared (you have to provide it in three different scales).\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addImagesXcassets.png\" height=\"350\" />\n</details>\n\n#### 🛠 Create `SplashScreen.storyboard`\n\nThis is the actual splash screen definition and will be used by the system to render your splash screen.\n\n1. Create a `SplashScreen.storyboard` file.\n2. Add a `View Controller` to the newly created `.storyboard` file:\n   - open `Library` (`+` button on the top-right),\n   - find `View Controller` element,\n   - drag-and-drop it to the `.storyboard` file.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addViewControllerToStoryboard.png\" height=\"350\" />\n</details>\n\n3. Add an `Image View` to the `View Controller`:\n   - first remove other `View` element from `View Controller`,\n   - open `Library` (`+` button on the top-right),\n   - find `Image View` element,\n   - drag-and-drop it as a `View Controller` child in view hierarchy inspector.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addImageViewToStoryboard.png\" height=\"350\" />\n</details>\n\n4. Set `Storyboard ID` to `SplashScreenViewController`:\n   - select `View Controller` in view hierarchy inspector,\n   - navigate to `Identity Inspector` in the right panel,\n   - and set `Storyboard ID` to `SplashScreenViewController`.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addStoryboardID.png\" height=\"350\" />\n</details>\n\n5. Tick `Is Initial View Controller` in `SplashScreenViewController`:\n   - select `View Controller` in view hierarchy inspector,\n   - navigate to `Attributes Inspector` in the right panel,\n   - and tick `Is Initial View Controller` in View Controller section.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-tickIsInitialViewController.png\" height=\"350\" />\n</details>\n\n6. Configure `Image View` source:\n   - select `Image View` in view hierarchy inspector,\n   - navigate to `Attributes Inspector` in the right panel,\n   - select `SplashScreen` in `Image` parameter).\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-configureImageView.png\" height=\"350\" />\n</details>\n\n7. Configure `Background` of the `Image View`:\n   - select `Image View` in view hierarchy inspector,\n   - navigate to `Attributes Inspector` in the right panel,\n   - configure `Background` parameter:\n     - To enter a `#RRGGBB` value you need to select `Custom` option and in the `Colors Popup` that appeared you need to navigate to the second tab and choose `RGB Sliders` from dropdown select.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-selectBackgroundColor.png\" height=\"350\" />\n</details>\n\n#### 🛠 Select `Content Mode` for the `ImageView` in `SplashScreen.storyboard`\n\nThis is how your image will be displayed on the screen.\n\n1. Open `SplashScreen.storyboard` and select `Image View` from `View Controller`.\n2. Navigate to `Attributes Inspector` in the right panel and locate `Content Mode`.\n3. Select one of the following:\n   - `Aspect Fit` to obtain [CONTAIN resize mode](#contain-resize-mode),\n   - `Aspect Fill` to obtain [COVER resize mode](#cover-resize-mode).\n4. You can always choose other options to achieve different image positioning and scaling.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-selectImageViewContentMode.png\" height=\"350\" />\n</details>\n\n#### 🛠 Mark `SplashScreen.storyboard` as the LaunchScreen\n\nThe newly created `SplashScreen.storyboard` needs to be marked as the `Launch Screen File` in your Xcode project in order to be presented from the very beginning of your application launch.\n\n1. Select your project in `Project Navigator`\n2. Select your project name from `TARGETS` panel and navigate to `General` tab.\n3. Locate `App Icons and Launch Images` section and `Launch Screen File` option.\n4. Select or enter `SplashScreen` as the value for located option.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-selectLaunchScreen.png\" height=\"350\" />\n</details>\n\n#### 🛠 (<em>optional</em>) Enable dark mode\n\n##### Provide different background colors\n\nDepending on what iOS version your application is targeting, you have to adjust your native project differently to a obtain working per-appearance splash screen view.\n\n##### I'm targeting iOS 11+\n\nYou can take advantage of [`named colors`](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/WhatsNewXcode/xcode_9/xcode_9.html) in your Xcode project.\n\n1. Create a new `Color Set` and customize its values for different color modes:\n   - in your `.xcassets` directory (either create a new `.xcassets` for colors, or reuse an existing one e.g. with images) create `New Color Set` and name it `SplashScreenBackground`,\n   - navigate to `Attributes Inspector` in the right panel and change `Appearance` to `Any, Dark`,\n   - select desired color in `Attributes Inspector` in the right panel for each mode.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-createNamedColor.png\" height=\"350\" />\n</details>\n\n2. Select created `named color` as the `Background` for the `Image View` in `SplashScreen.storyboard`:\n   - open `SplashScreen.storyboard` and select `Image View` in view hierarchy inspector,\n   - navigate to `Attributes Inspector` in the right panel,\n   - configure `Background` parameter by selecting your created `named color` (that should be listed as `SplashScreenBackground`).\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-selectNamedColor.png\" height=\"350\" />\n</details>\n\n##### I'm targeting iOS version < 11\n\nYou cannot use [`named colors`](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/WhatsNewXcode/xcode_9/xcode_9.html) feature in your Xcode project.\nInstead you have to create an additional image set that contains small 1x1px images, each with the desired background color. Then, you'll use this additional image resource as a background in the splash screen view.\n\nYou can use this online generator to obtain 1x1px `.png` images with desired colors: http://www.1x1px.me.\n\n1. Create `SplashScreenBackground` `Image Set` with desired background colors for each mode in your `Images.xcassets` directory:\n   - open your `.xcassets` directory with images,\n   - in the content panel add `New image set` and name it `SplashScreenBackground`,\n   - convert this `Image set` to support `Dark Appearance` by navigating to `Attributes Inspector` in the right panel and changing `Appearance` to `Any, Dark`,\n   - provide images with colors for every mode (you can generate color 1x1px images using http://www.1x1px.me).\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addSplashScreenBackgroundImages.png\" height=\"250\" />\n</details>\n\n2. Update `SplashScreen.storyboard` to consist of a single top-level `View` with two `Image View` subviews (solid-colored image in the background and actual splash screen image in the foreground):\n\n   - open `SplashScreen.storyboard` and replace `Image View` with a plain `View` (search `Library` for it and drag&drop it in place of current `Image View`),\n   - add two\n\n3. Configure first `Image View` (background color):\n   - configure attributes in `Attributes Inspector`:\n     - set `Image` to `SplashScreenBackground` (prepared in previous step),\n     - set `Content Mode` to `Scale To Fill` (color needs to take all available space),\n   - make this subview take all available space in parent view:\n     - open `Add new constraints` bottom menu,\n     - make sure `Constrain to margin` is not checked,\n     - for every input, open the dropdown and select `View` (parent view reference) and set `0` as the value,\n     - once every side is covered (`0` value and parent view reference selected in dropdown) hit `Add 4 Constraints`,\n     - observe that in `View Hierarchy Inspector` constraints are added and `Image View` resized to take whole place of parent view.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-createBackgroundImageView.png\" height=\"350\" />\n</details>\n\n4. Configure second `Image View` (actual splash screen image):\n   - select second `Image View` and select correct `Image` in `Attributes Inspector` alongside with desired `Content Mode`,\n   - make this subview take all available space in parent view (see previous step).\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addConstraintsToImageViews.png\" height=\"350\" />\n</details>\n\n##### Provide different splash screen image\n\nYou might want to add a separate image for `dark` mode. If the system is switched to `dark` mode, it would pick this different image instead of the normal one and present it in the splash screen view.\n\n1. In your Xcode project open `SplashScreen` (created in previous section).\n2. Convert this asset to support `Dark Appearance`:\n\n- navigate to `Attributes Inspector` in the right panel,\n- locate `Appearances` section and select `Any, Dark`,\n- provide image for `dark mode` by dropping it to the correct box.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-addDarkImagesXcassets.png\" height=\"280\" />\n</details>\n\n###### Background color when you want to support iOS < 11\n\nIf you're targeting a version of iOS < 11 then you cannot use `named color` feature and instead you need to generate images with desired background colors that are going to be used as the background for splash screen view.\nThere is this awesome 1x1px png online generator: http://www.1x1px.me (use it to generate two 1x1px images with desired background colors for different color modes).\n\n#### 🛠 (<em>optional</em>) Customize StatusBar\n\nYou might want to customize the StatusBar appearance during the time the SplashScreen is being shown.\n\n1. Customize `StatusBar hiding` flag:\n\n- open main project view, select your project name from `TARGETS` panel and navigate to `Info` tab,\n- add or modify `Status bar initially hidden` attribute with desired value.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-statusBar-hidden.png\" height=\"350\" />\n</details>\n\n2. Customize `StatusBar style` option:\n\n- open main project view, select your project name from `TARGETS` panel and navigate to `Info` tab,\n- add or modify `Status bar style` attribute with desired value.\n\n<details>\n <summary>Show image with details</summary>\n<img src=\"./assets/configuration-ios-statusBar-style.png\" height=\"350\" />\n</details>\n\n## 🤖 Configure Android\n\nTo achieve fully-native splash screen behavior, `expo-splash-screen` needs to be hooked into the native view hierarchy and consume some resources that have to be placed under `/android/app/src/res` directory.\n\n### Manual Configuration\n\n1. [Configure `res/drawable/splashscreen_image.png`](#-configure-resdrawablesplashscreen_imagepng)\n2. [Configure `res/values/colors.xml`](#-configure-resvaluescolorsxml)\n3. [Configure `res/drawable/splashscreen.xml`](#-configure-resdrawablesplashscreenxml)\n4. [Configure `res/values/styles.xml`](#-configure-resvaluesstylesxml)\n5. [Configure `AndroidManifest.xml`](#-configure-androidmanifestxml)\n6. [(<em>optional</em>) Customzine `resizeMode`](#-optional-customize-resizemode)\n7. [(<em>optional</em>) Enable dark mode](#-optional-enable-dark-mode-1)\n8. [(<em>optional</em>) Customize StatusBar](#-customize-statusbar-1)\n\n#### 🛠 Configure `res/drawable/splashscreen_image.png`\n\nYou have to provide your splash screen image and place it under the `res/drawable` directory.\nThis image will be loaded as soon as Android mounts your application's native view hierarchy.\n\n##### `NATIVE` mode adjustments\n\nIf you've overridden `<string name=\"expo_splash_screen_resize_mode\">native</string>` mode in [`res/values/strings.xml`](#-optional-customize-resizemode), you need to do a few additional steps.\n\nIn your application's `res` directory you might want to have a number of `drawable-X` sub-directories (where `X` is the different DPI for different devices). They store different versions of images that are picked based on the device's DPI (for more information please see [this official Android docs](https://developer.android.com/training/multiscreen/screendensities#TaskProvideAltBmp)).\n\nTo achieve proper scaling of your splash screen image on every device you should have following directories:\n\n- `res/drawable-mdpi` - scale 1x - resources for medium-density (mdpi) screens (~160dpi). (This is the baseline density.)\n- `res/drawable-hdpi` - scale 1.5x - resources for high-density (hdpi) screens (~240dpi).\n- `res/drawable-xhdpi` - scale 2x - resources for extra-high-density (xhdpi) screens (~320dpi).\n- `res/drawable-xxhdpi` - scale 3x - resources for extra-extra-high-density (xxhdpi) screens (~480dpi).\n- `res/drawable-xxxhdpi` - scale 4x - resources for extra-extra-extra-high-density (xxxhdpi) uses (~640dpi).\n\nEach of directories mentioned above should contain the same `splashscreen_image.png` file, but with a different resolution (pay attention to scale factors).\n\n#### 🛠 Configure `res/values/colors.xml`\n\nThis file contains colors that are reused across your application at the native level.\nUpdate the file with the following content or create one if missing:\n\n```diff\n<resources>\n+ <color name=\"splashscreen_background\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\n  <!-- Other colors defined for your application -->\n</resources>\n```\n\n#### 🛠 Configure `res/drawable/splashscreen.xml`\n\nThis file contains the description of how the splash screen view should be drawn by the Android system.\nCreate the file with the following content:\n\n```diff\n+ <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+   <item android:drawable=\"@color/splashscreen_background\"/>\n+ </layer-list>\n```\n\n#### `NATIVE` mode adjustments\n\nIf you've overridden `<string name=\"expo_splash_screen_resize_mode\">native</string>` mode in [`res/values/strings.xml`](#-optional-customize-resizemode), you shoulw add:\n\n```diff\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <item android:drawable=\"@color/splashscreen_background\"/>\n+ <item>\n+   <bitmap android:gravity=\"center\" android:src=\"@drawable/splashscreen_image\"/>\n+ </item>\n</layer-list>\n```\n\n#### 🛠 Configure `res/values/styles.xml`\n\nLocate your main activity theme in `/android/app/src/res/values/styles.xml` or create one if missing.\n\n```diff\n  <!-- Main activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n+   <item name=\"android:windowBackground\">@drawable/splashscreen</item> <!-- this line instructs the system to use 'splashscreen.xml' as a background of the whole application -->\n    <!-- Other style properties -->\n  </style>\n```\n\n#### 🛠 Configure `AndroidManifest.xml`\n\nAdjust your application's main `AndroidManifest.xml` to contain an `android:theme` property pointing to the style that contains your splash screen configuration:\n\n```diff\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n\n  ...\n\n  <application ...>\n\n+   <!-- Ensure that 'android:theme' property is pointing to the style containing native splash screen reference - see 'styles.xml' -->\n    <activity\n      android:name=\".MainActivity\"\n+     android:theme=\"@style/AppTheme\"\n      ...\n    >\n      ...\n    </activity>\n  </application>\n\n</manifest>\n```\n\n#### 🛠 (<em>optional</em>) Customize `resizeMode`\n\nThe default image [`resizeMode`](https://github.com/expo/expo/tree/%40kudo/modularize-expo-splash-screen/packages/expo-splash-screen#built-in-splash-screen-image-resize-modes) is [`CONTAIN`](https://github.com/expo/expo/tree/%40kudo/modularize-expo-splash-screen/packages/expo-splash-screen#contain-resize-mode). If you want to have different `resizeMode`, you need to override in `res/values/strings.xml`.\n\n```diff\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_resize_mode\">contain|cover|native</string>\n</resources>\n```\n\n#### 🛠 (<em>optional</em>) Enable dark mode\n\n##### Provide different background colors - `res/values-night/colors.png`\n\nIf you want to have different background colors in your splash screen depending on the system color mode, you need to create a similar file to `colors.xml`, but in the directory `res/values-night`.\nValues in this file are going to picked by the system when it is switched to `dark` mode.\n\n```diff\n<resources>\n+ <color name=\"splashscreen_background\">#AABBCC</color> <!-- #AARRGGBB or #RRGGBB format -->\n</resources>\n```\n\n##### Provide different splash screen image - `res/drawable-night/splashscreen_image.png`\n\nYou might want to provide a separate splash screen image for dark mode usage, and place it under the `res/drawable-night` directory with exactly the same name as the normal one.\nThis step is optional, because you might want to have the same image in both `light` and `dark` modes (e.g. you have just a light-themed logo and you want to have different background colors in different modes).\n\n#### 🛠 (<em>optional</em>) Customize StatusBar\n\nYou might want to customize the StatusBar appearance during the time the SplashScreen is being shown.\n\n1. Customize `StatusBar hiding` flag\n\nTo have the StatusBar completely hidden you need to update your `res/values/styles.xml` file with the following entry (to prevent StatusBar from hiding either remove this entry or enter `false` as the value):\n\n```diff\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowFullscreen\">true</item>\n    <!-- Other style properties -->\n  </style>\n```\n\nIf you have multiple `styles.xml` files located in different directories containing exactly the same `style` entry (e.g. in `res/values-night`, `res/values-night-v23`, etc.), be sure to update these files accordingly.\n\nRead more about `android:windowFullscreen` flag in [official Android documentation](https://developer.android.com/reference/android/R.attr#windowFullscreen).\n\n2. Customize `StatusBar style` option\n\nThis option is only available for Android devices running Android 6.0 or greater.\nTo enforce `light` or `dark` StatusBar style for given system color mode, you have to prepare or update your `res/values-v23/styles.xml` file with the following entry (as of this option being supported since API 23, you have to configure specifically named directory containing separate configuration files):\n\n```diff\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:windowLightStatusBar\">true|false</item>\n    <!-- Other style properties -->\n  </style>\n```\n\nAvailable values:\n\n- `true` for having dark-colored icons,\n- `false` for having light-colored icons.\n\nIf you have multiple `styles.xml` files located in different directories containing exactly the same `style` entry (e.g. in `res/values-night-v23` (for dark color mode), etc.), be sure to update these files accordingly.\n\nRead more about `android:windowLightStatusBar` flag in [official Android documentation](https://developer.android.com/reference/android/R.attr#windowLightStatusBar).\n\nTo read more about Android multi-API-level support see [this official documentation](https://developer.android.com/guide/topics/resources/providing-resources).\n\n3. Customize `StatusBar color` option (a.k.a. `background color` of the StatusBar component)\n\nTo achieve custom background color you need to create a new color resource and provide it to the SplashScreen `style` description.\n\nCreate new color resource in your `res/values/colors.xml` (if your application supports dark mode, consider adding different color in `res/values-night/colors.xml` file):\n\n```diff\n  <resources>\n    <color name=\"splashscreen_background\">#D0D0C0</color>\n+   <color name=\"splashscreen_statusbar_color\">#(AA)RRGGBB</color> <!-- #AARRGGBB or #RRGGBB format -->\n  </resources>\n```\n\nUpdate your `res/values/styles.xml` file with the following entry:\n\n```diff\n  <!-- Main/SplashScreen activity theme. -->\n  <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item>\n+   <item name=\"android:statusBarColor\">@color/splashscreen_statusbar_color</item>\n    <!-- Other style properties -->\n  </style>\n```\n\nIf you have multiple `styles.xml` files located in different directories containing exactly the same `style` entry (e.g. in `res/values-night`, `res/values-night-v23`, etc.), be sure to update these files accordingly.\n\nRead more about `android:statusBarColor` option in [official Android documentation](https://developer.android.com/reference/android/R.attr#statusBarColor).\n\n4. Customize `StatusBar translucent` flag\n\nWhen the StatusBar is translucent, the app will be able to draw under the StatusBar component area.\n\nTo make the StatusBar translucent update your `res/values/strings.xml` file with the following content:\n\n```diff\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">true</string>\n</resources>\n```\n\n## 👏 Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).\n\n## ❓ Known issues\n\n### iOS caching\n\nSplash Screens on iOS apps can sometimes encounter a caching issue where the previous image will flash before showing the new, intended image. When this occurs, we recommend you try power cycling your device and uninstalling and re-installing the application. However, the caching sometimes can persist for a day or two so be patient if the aforementioned steps were unable to resolve the issue.\n\n### `NATIVE` mode pushes splash image up a little bit\n\nSee [`NATIVE`](#native-resize-mode) mode preview above.\n\n> We are aware of this issue and unfortunately haven't been able to provide a solution as of yet. This is on our immediate roadmap...\n\n## ⬆️ Migrate from old versions\n\n### Migrate from expo-splash-screen < 0.12.0\n\nWe try to keep changes backward compatible, the code for `expo-splash-screen` will still work as it used to be. However, if you are going to migrate as new style API, here are the steps:\n\n1. Migrate your project from react-native-unimodules to expo-modules-core\n2. Remove expo-splash-screen code from MainActivity\n\n```diff\n--- a/android/app/src/main/java/com/helloworld/MainActivity.java\n+++ b/android/app/src/main/java/com/helloworld/MainActivity.java\n import com.facebook.react.ReactRootView;\n import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\n\n-import host.exp.exponent.experience.splashscreen.legacy.singletons.SplashScreen;\n-import host.exp.exponent.experience.splashscreen.legacy.SplashScreenImageResizeMode;\n-\n public class MainActivity extends ReactActivity {\n   @Override\n   protected void onCreate(Bundle savedInstanceState) {\n     // This is required for expo-splash-screen.\n     setTheme(R.style.AppTheme);\n     super.onCreate(null);\n-    // SplashScreen.show(...) has to be called after super.onCreate(...)\n-    SplashScreen.show(this, SplashScreenImageResizeMode.CONTAIN, ReactRootView.class, false);\n   }\n```\n\n3. Override default `resizeMode` and `statusBarTranslucent` in stings.xml\n\n```diff\n--- a/android/app/src/main/res/values/strings.xml\n+++ b/android/app/src/main/res/values/strings.xml\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <resources>\n   <string name=\"app_name\">sdk42</string>\n+  <string name=\"expo_splash_screen_resize_mode\">contain</string>\n+  <string name=\"expo_splash_screen_status_bar_translucent\">false</string>\n</resources>\n```\n\n## 🏅 Hall Of Fame\n\nThis module is based on a solid work from (many thanks for that 👏):\n\n- [react-native-splash-screen](https://github.com/crazycodeboy/react-native-splash-screen)\n- [react-native-bootsplash](https://github.com/zoontek/react-native-bootsplash)\n- [react-native-make](https://github.com/bamlab/react-native-make)",
        "copyright": null
    },
    "expo-status-bar@2.2.3": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/status-bar/\">\n    <img\n      src=\"../../.github/resources/expo-status-bar.svg\"\n      alt=\"expo-status-bar\"\n      height=\"64\" />\n  </a>\n</p>\n\nProvides the same interface as the React Native [StatusBar API](https://reactnative.dev/docs/statusbar), but with slightly different defaults to work great in Expo environments.\n\n- Default to `translucent={true}` on Android.\n- The `style=\"auto\"` maps to a dark status bar when in light mode and a light status bar when in dark moded. `style=\"inverted\"` inverts this behavior.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/status-bar/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/status-bar/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/status-bar/). If you follow the link and there is no documentation available then this library is not yet usable within managed projects &mdash; it is likely to be included in an upcoming Expo SDK release.\n\nPlease refer to the [React Native StatusBar API documentation](https://reactnative.dev/docs/statusbar).\n\n# Installation in bare React Native projects\n\n```\nnpm install expo-status-bar\n```\n\n### Configure for Android\n\nNo additional setup necessary.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-symbols@0.4.4": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/symbols/\">\n    <img\n      src=\"../../.github/resources/expo-symbols.svg\"\n      alt=\"expo-symbols\"\n      height=\"64\" />\n  </a>\n</p>\n\nProvides access to the SF Symbols library on iOS for React Native and Expo apps.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/symbols/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/symbols/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/symbols/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-symbols\n```\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo-system-ui@5.0.7": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "# expo-system-ui\n\n**`expo-system-ui`** adds support for locking the user interface (appearance) and updating the root view background color.\n\n## API documentation\n\n- [Documentation for the latest stable release][docs-stable]\n- [Documentation for the main branch][docs-main]\n\n### Installation\n\n```\nnpx expo install expo-system-ui\n```\n\n### Extra Setup\n\nFor bare React Native projects, ensure that you have the [native `expo` package][expo-modules] setup before continuing, this is required for all Expo modules.\n\n## Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide][contributing].\n\n[docs-main]: https://docs.expo.dev/versions/unversioned/sdk/system-ui/\n[docs-stable]: https://docs.expo.dev/versions/latest/sdk/system-ui/\n[contributing]: https://github.com/expo/expo#contributing\n[expo-modules]: https://docs.expo.dev/bare/installing-expo-modules/",
        "copyright": null
    },
    "expo-web-browser@14.1.6": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "650 Industries, Inc.",
        "licenseText": "<p>\n  <a href=\"https://docs.expo.dev/versions/latest/sdk/webbrowser/\">\n    <img\n      src=\"../../.github/resources/expo-web-browser.svg\"\n      alt=\"expo-web-browser\"\n      height=\"64\" />\n  </a>\n</p>\n\nProvides access to the system's web browser and supports handling redirects. On iOS, it uses SFSafariViewController or ASWebAuthenticationSession, depending on the method you call, and on Android it uses ChromeCustomTabs. As of iOS 11, SFSafariViewController no longer shares cookies with Safari, so if you are using WebBrowser for authentication you will want to use WebBrowser.openAuthSessionAsync, and if you just want to open a webpage (such as your app privacy policy), then use WebBrowser.openBrowserAsync.\n\n# API documentation\n\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/webbrowser/)\n- [Documentation for the main branch](https://docs.expo.dev/versions/unversioned/sdk/webbrowser/)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/webbrowser/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `expo` package](https://docs.expo.dev/bare/installing-expo-modules/) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nnpx expo install expo-web-browser\n```\n\n### Configure for Android\n\nNo additional set up necessary.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n# Contributing\n\nContributions are very welcome! Please refer to guidelines described in the [contributing guide](https://github.com/expo/expo#contributing).",
        "copyright": null
    },
    "expo@53.0.9": {
        "licenses": "MIT",
        "repository": "https://github.com/expo/expo",
        "publisher": "Expo",
        "licenseText": "# expo\n\nThe `expo` package is a single package you can install in any React Native app to begin using Expo modules. [API Reference](https://docs.expo.dev/versions/latest/sdk/expo/).\n\n- includes core infrastructure for Expo modules: `expo-modules-core` and `expo-modules-autolinking`.\n- bundles a minimal set of Expo modules that are required by nearly every app, such as `expo-asset`.\n- provides [`@expo/cli`](https://github.com/expo/expo/blob/main/packages/%40expo/cli/README.md), a small CLI that provides a clean interface around both bundlers (such as Metro and Webpack) and native build tools (Xcode, Simulator.app, Android Studio, ADB, etc.), can generate native projects with `npx expo prebuild`, and aligns compatible package versions with `npx expo install`.\n- exposes a JavaScript module that configures an app at runtime as needed to use `expo-font` and to function in Expo Go (optional, only if applicable).\n\n\nSee [CONTRIBUTING](./CONTRIBUTING.md) for instructions on working on this package.",
        "copyright": null
    },
    "jotai@2.12.4": {
        "licenses": "MIT",
        "repository": "https://github.com/pmndrs/jotai",
        "publisher": "Daishi Kato",
        "licenseText": "MIT License\n\nCopyright (c) 2020 Poimandres\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2020 Poimandres"
    },
    "react-dom@19.0.0": {
        "licenses": "MIT",
        "repository": "https://github.com/facebook/react",
        "licenseText": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) Meta Platforms, Inc. and affiliates."
    },
    "react-native-gesture-handler@2.24.0": {
        "licenses": "MIT",
        "repository": "https://github.com/software-mansion/react-native-gesture-handler",
        "publisher": "Krzysztof Magiera",
        "email": "krzys.magiera@gmail.com",
        "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Software Mansion <swmansion.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2016 Software Mansion <swmansion.com>"
    },
    "react-native-paper@5.14.5": {
        "licenses": "MIT",
        "repository": "https://github.com/callstack/react-native-paper",
        "licenseText": "MIT License\n\nCopyright (c) 2017 Callstack\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2017 Callstack"
    },
    "react-native-reanimated@3.17.5": {
        "licenses": "MIT",
        "repository": "https://github.com/software-mansion/react-native-reanimated",
        "publisher": "Krzysztof Magiera",
        "email": "krzys.magiera@gmail.com",
        "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Software Mansion <swmansion.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2016 Software Mansion <swmansion.com>"
    },
    "react-native-safe-area-context@5.4.0": {
        "licenses": "MIT",
        "repository": "https://github.com/th3rdwave/react-native-safe-area-context",
        "publisher": "Janic Duplessis",
        "email": "janicduplessis@gmail.com",
        "licenseText": "MIT License\n\nCopyright (c) 2019 Th3rd Wave\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2019 Th3rd Wave"
    },
    "react-native-screens@4.10.0": {
        "licenses": "MIT",
        "repository": "https://github.com/software-mansion/react-native-screens",
        "publisher": "Krzysztof Magiera",
        "email": "krzys.magiera@gmail.com",
        "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2018 Software Mansion <swmansion.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2018 Software Mansion <swmansion.com>"
    },
    "react-native-web@0.20.0": {
        "licenses": "MIT",
        "repository": "https://github.com/necolas/react-native-web",
        "publisher": "Nicolas Gallagher",
        "licenseText": "MIT License\n\nCopyright (c) Nicolas Gallagher.\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) Nicolas Gallagher.. Copyright (c) Meta Platforms, Inc. and affiliates."
    },
    "react-native-webview@13.13.5": {
        "licenses": "MIT",
        "repository": "https://github.com/react-native-webview/react-native-webview",
        "publisher": "Jamon Holmgren",
        "email": "jamon@infinite.red",
        "licenseText": "MIT License\n\nCopyright (c) 2015-present, Facebook, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2015-present, Facebook, Inc."
    },
    "react-native@0.79.2": {
        "licenses": "MIT",
        "repository": "https://github.com/facebook/react-native",
        "licenseText": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) Meta Platforms, Inc. and affiliates."
    },
    "react@19.0.0": {
        "licenses": "MIT",
        "repository": "https://github.com/facebook/react",
        "licenseText": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) Meta Platforms, Inc. and affiliates."
    },
    "timetable-scraper@0.0.4": {
        "licenses": "MIT",
        "licenseText": "MIT License\n\nCopyright (c) 2025 OpenTUT\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2025 OpenTUT"
    },
    "zod@3.25.28": {
        "licenses": "MIT",
        "repository": "https://github.com/colinhacks/zod",
        "publisher": "Colin McDonnell",
        "email": "zod@colinhacks.com",
        "licenseText": "MIT License\n\nCopyright (c) 2025 Colin McDonnell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
        "copyright": "Copyright (c) 2025 Colin McDonnell"
    }
}
